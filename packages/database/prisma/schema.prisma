// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

// --- Enums ---
enum Role {
  STUDENT
  INSTRUCTOR
  TA
  ADMIN
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
  MISSING
}

// --- Core models ---
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  role         Role     @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  profile      Profile?
  enrollments  Enrollment[]
  ownedCourses Course[]     @relation("OwnedCourses")
  posts        Post[]
  submissions  Submission[]
  Comment      Comment[]
}

model Profile {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  fullName  String?
  bio       String?
  avatarUrl String?
}

// --- Course / Enrollment / Assignment / Submission ---
model Course {
  id          String   @id @default(cuid())
  code        String   @unique
  title       String
  description String?
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String?
  owner   User?   @relation("OwnedCourses", fields: [ownerId], references: [id])

  enrollments Enrollment[]
  assignments Assignment[]
}

model Enrollment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Assignment {
  id           String    @id @default(cuid())
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     String
  title        String
  description  String?
  specMarkdown String?
  points       Int       @default(100)
  dueAt        DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  submissions Submission[]
}

model Submission {
  id           String           @id @default(cuid())
  assignment   Assignment       @relation(fields: [assignmentId], references: [id])
  assignmentId String
  student      User             @relation(fields: [studentId], references: [id])
  studentId    String
  submittedAt  DateTime         @default(now())
  status       SubmissionStatus @default(SUBMITTED)
  grade        Int?
  feedback     String?
  filesJson    Json?
}

// --- Forum / Posts / Categories ---
model Category {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  posts     Post[]
}

model Post {
  id         String    @id @default(cuid())
  title      String
  slug       String    @unique
  content    String
  published  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

// --- Metadata / Migrations hint ---
// Add any additional indexes or constraints as needed for search/performance.
